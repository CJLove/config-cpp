name: ci

on: [push, pull_request]

jobs:
  build_linux:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        config:
          # Disabled due to apt-get update issues
          #- { compiler: gcc, version: 8, build_type: Release, cppstd: 14, examples: ON }
          #- { compiler: gcc, version: 9, build_type: Release, cppstd: 17, examples: OFF }
          - { compiler: gcc, version: 10, build_type: Debug, cppstd: 20, examples: ON }
          - { compiler: gcc, version: 11, build_type: Debug, cppstd: 20, examples: OFF }
          - { compiler: gcc, version: 12, build_type: Release, cppstd: 20, examples: ON }
          - { compiler: gcc, version: 13, build_type: Release, cppstd: 20, examples: OFF }
          - { compiler: gcc, version: 14, build_type: Release, cppstd: 20, examples: ON }
          - { compiler: clang, version: 11, build_type: Release, cppstd: 14, examples: OFF }
          - { compiler: clang, version: 11, build_type: Debug, cppstd: 17, examples: ON }
          - { compiler: clang, version: 12, build_type: Debug, cppstd: 17, examples: OFF }
          - { compiler: clang, version: 13, build_type: Debug, cppstd: 17, examples: OFF }
          - { compiler: clang, version: 14, build_type: Debug, cppstd: 17, examples: OFF }
          - { compiler: clang, version: 15, build_type: Release, cppstd: 20, examples: ON }
          - { compiler: clang, version: 16, build_type: Release, cppstd: 20, examples: OFF }
          - { compiler: clang, version: 17, build_type: Release, cppstd: 20, examples: ON }
          - { compiler: clang, version: 18, build_type: Release, cppstd: 20, examples: OFF }
          - { compiler: clang, version: 19, build_type: Release, cppstd: 20, examples: ON }
          - { compiler: clang, version: 20, build_type: Release, cppstd: 20, examples: OFF }
    container:
      image: ${{ matrix.config.compiler == 'clang' && 'teeks99/clang-ubuntu' || matrix.config.compiler }}:${{ matrix.config.version }}
    name: "${{ matrix.config.compiler}} ${{ matrix.config.version }} (C++${{ matrix.config.cppstd }}, ${{ matrix.config.build_type }})"
    steps:
      - uses: actions/checkout@v3
      - name: Setup
        run: |
          apt-get update && apt-get install -y curl git zip unzip tar pkg-config
          CMAKE_VERSION="3.24.2"
          curl -sSL https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh -o install-cmake.sh
          chmod +x install-cmake.sh
          ./install-cmake.sh --prefix=/usr/local --skip-license
      - name: Setup Compiler
        if: matrix.config.compiler == 'clang'
        run: |
          if [[ "${{ matrix.config.version }}" -ge 4 ]]; then
            scripts/ci_setup_clang.sh "${{ matrix.config.version }}"
            echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
          fi
          echo "CC=clang-${{ matrix.config.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.config.version }}" >> $GITHUB_ENV
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: '**/vcpkg.json'
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: 120deac3062162151622ca4860575a33844ba10b          
      - name: Build
        run: |
          mkdir -p build && cd build
          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_CXX_STANDARD=${{ matrix.config.cppstd }} \
            -DBUILD_EXAMPLES=${{ matrix.config.example }} \
            -DYAML_SUPPORT=ON \
            -DJSON_SUPPORT=ON \
            -DTOML_SUPPORT=ON \
            -DBUILD_TESTS=ON 
          make -j2
          ctest -j2 --output-on-failure